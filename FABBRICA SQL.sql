--CREAZIONE TABELLE
CREATE TABLE CLIENTE (
  IDCLIENTE NUMBER,
  NOME VARCHAR2(30) NOT NULL,
  COGNOME VARCHAR2(30) NOT NULL,
  EMAIL VARCHAR2(30) NOT NULL,
  TELEFONO NUMBER NOT NULL,
  VIA VARCHAR2(30) NOT NULL,
  CITTA VARCHAR2(30) NOT NULL,
  CAP NUMBER NOT NULL
  PRIMARY KEY (IDCLIENTE),
  CONSTRAINT UK_EMAIL UNIQUE (EMAIL),
  CONSTRAINT UK_TELEFONO UNIQUE (TELEFONO)
);

CREATE TABLE FATTURA (
  IDFATTURA NUMBER,
  DATAEMISSIONE DATE,
  TOTALE NUMBER NOT NULL,
  PRIMARY KEY (IDFATTURA)
);

CREATE TABLE SPEDIZIONE (
  IDSPEDIZIONE NUMBER PRIMARY KEY,
  TEL NUMBER NOT NULL,
  NOME VARCHAR2(30) NOT NULL,
  VIA VARCHAR2(30) NOT NULL,
  CITTA VARCHAR2(30) NOT NULL,
  CAP NUMBER NOT NULL
);

CREATE TABLE ORDINE (
  IDORDINE NUMBER NOT NULL,
  IDFATTURA NUMBER NOT NULL,
  IDCLIENTE NUMBER NOT NULL,
  IDSPEDIZIONE NUMBER NOT NULL,
  NUMEROPRODOTTI NUMBER NOT NULL,
  DATACREAZIONE DATE NOT NULL,
  PRIMARY KEY (IDORDINE),
  CONSTRAINT FK_ORDINE_FATTURA FOREIGN KEY (IDFATTURA) REFERENCES FATTURA(IDFATTURA),
  CONSTRAINT FK_ORDINE_CLIENTE FOREIGN KEY (IDCLIENTE) REFERENCES CLIENTE(IDCLIENTE),
  CONSTRAINT FK_ORDINE_SPEDIZIONE FOREIGN KEY (IDSPEDIZIONE) REFERENCES SPEDIZIONE(IDSPEDIZIONE)
);

CREATE TABLE COMPONENTE (
  EAN NUMBER,
  NOME VARCHAR2(30) NOT NULL,
  PREZZO NUMBER NOT NULL,
  PRIMARY KEY (EAN)
);

CREATE TABLE PROGETTO (
  IDPROG NUMBER,
  NOME VARCHAR2(30) NOT NULL,
  DATAINIZIO DATE,
  PRIMARY KEY (IDPROG),
  UNIQUE (NOME)
);

CREATE TABLE COMPONENTIPROGETTO (   /* è  l'associazione "è composto" */
  IDPROG NUMBER,
  EAN NUMBER,
  QUANTITA NUMBER(2,0),
  FOREIGN KEY (IDPROG) REFERENCES PROGETTO (IDPROG),
  FOREIGN KEY (EAN) REFERENCES COMPONENTE (EAN)
);

CREATE TABLE CONTIENE (
  IDPROG NUMBER,
  IDORDINE NUMBER,
  QUANTITA NUMBER,
  FOREIGN KEY (IDPROG) REFERENCES PROGETTO(IDPROG),
  FOREIGN KEY (IDORDINE) REFERENCES ORDINE(IDORDINE)
);

CREATE TABLE FORNITORE (
  PARTITAIVA CHAR(11),
  VIA VARCHAR2(30),
  CIVICO NUMBER ,
  CAP NUMBER,
  TEL NUMBER,
  PRIMARY KEY (PARTITAIVA),
  UNIQUE (TEL)
);
 
CREATE TABLE FORNITURA (
  PARTITAIVAFORNITORE CHAR(11) PRIMARY KEY,
  QUANTITA NUMBER(2,0) NOT NULL,
  EAN NUMBER NOT NULL,
  CONSTRAINT FK_FORNITURA_ESTERNA1 FOREIGN KEY (PARTITAIVAFORNITORE)
  REFERENCES FORNITORE (PARTITAIVA),
  CONSTRAINT FK_FORNITURA_ESTERNA2 FOREIGN KEY (EAN) REFERENCES COMPONENTE (EAN)
);

CREATE TABLE COMPONENTEFORNISCEFORNITURA {
  EAN NUMBER;
  PARTITAIVA CHAR(11);
  QUANTITA NUMBER;
  FOREIGN KEY EAN
}

CREATE TABLE REPARTO (
  IDREPARTO NUMBER PRIMARY KEY,
  TELEFONO CHAR(10) UNIQUE,
  DIPENDENTIMAX NUMBER NOT NULL
);

CREATE TABLE PROGETTAZIONE (
  IDREPARTO NUMBER PRIMARY KEY,
  STIMATEMPO NUMBER,/*numero di giorni*/
  IDPROG NUMBER,
  CONSTRAINT FK_PROGETTAZIONE_PROGETTO FOREIGN KEY (IDPROG) REFERENCES PROGETTO(IDPROG),
  FOREIGN KEY (IDREPARTO) REFERENCES REPARTO(IDREPARTO),
  UNIQUE (IDPROG)
);

CREATE TABLE PRODUZIONE (
  IDREPARTO NUMBER PRIMARY KEY,
  IDPROG NUMBER,
  NMACCHINE NUMBER NOT NULL,
  CONSTRAINT FK_PRODUZIONE_PROGETTO FOREIGN KEY (IDPROG) REFERENCES PROGETTO(IDPROG),
  FOREIGN KEY (IDREPARTO) REFERENCES REPARTO(IDREPARTO),
  UNIQUE (IDPROG)
);

CREATE TABLE COLLAUDO (
  IDREPARTO NUMBER PRIMARY KEY,
  NMACCHINE NUMBER NOT NULL,
  IDPROG NUMBER,
  CONSTRAINT UK_IDPROG UNIQUE (IDPROG),
  FOREIGN KEY (IDPROG) REFERENCES PROGETTO(IDPROG),
  FOREIGN KEY (IDREPARTO) REFERENCES REPARTO(IDREPARTO)
);

CREATE TABLE MAGAZZINO (
  IDREPARTO NUMBER PRIMARY KEY,
  SPAZIOTOT NUMBER NOT NULL,
  FOREIGN KEY (IDREPARTO) REFERENCES REPARTO(IDREPARTO)
);

CREATE TABLE IMMAGAZZINAMENTO (
  IDLOTTO number NOT NULL,
  ORARIO DATE NOT NULL,
  DATAIMM DATE NOT NULL,
  QUANTITA NUMBER NOT NULL,
  PARTITAIVA CHAR(11) NOT NULL,
  IDREPARTO NUMBER NOT NULL,
  PRIMARY KEY (IDLOTTO),
  CONSTRAINT FK_IMMAGAZZINAMENTO1 FOREIGN KEY (PARTITAIVA) REFERENCES FORNITORE (PARTITAIVA),
  CONSTRAINT FK_IMMAGAZZINAMENTO3 FOREIGN KEY (IDREPARTO) REFERENCES MAGAZZINO (IDREPARTO)
);

CREATE TABLE DIPENDENTE (
  IDDIPENDENTE NUMBER,
  NOME VARCHAR2(30) NOT NULL,
  COGNOME VARCHAR2(30) NOT NULL,
  RAL NUMBER NOT NULL,
  TIPO VARCHAR2(30) NOT NULL,
  CHECK (TIPO ='magazziniere'OR TIPO ='ingegnere'OR TIPO ='operaio'OR TIPO ='collaudatore'OR TIPO ='responsabile'),
  PRIMARY KEY (IDDIPENDENTE)
);

CREATE TABLE TURNO (
  IDDIPENDENTE NUMBER NOT NULL,
  IDREPARTO NUMBER NOT NULL,
  ORAINIZIO DATE NOT NULL,
  ORAFINE DATE,
  CONSTRAINT FK_TURNO_DIPENDENTE FOREIGN KEY (IDDIPENDENTE)
    REFERENCES DIPENDENTE (IDDIPENDENTE),
  CONSTRAINT FK_TURNO_REPARTO FOREIGN KEY (IDREPARTO)
    REFERENCES REPARTO (IDREPARTO)
);













--POPOLAMENTO TABELLE
/*Popolamento tabella cliente*/
  INSERT INTO CLIENTE (IDCLIENTE, NOME, COGNOME, EMAIL, TELEFONO)
VALUES(1, 'Mario', 'Rossi', 'mario@email.com', 123456789);
  INSERT INTO CLIENTE (IDCLIENTE, NOME, COGNOME, EMAIL, TELEFONO)
VALUES(2, 'Laura', 'Bianchi', 'laura@email.com', 987654321);
  INSERT INTO CLIENTE (IDCLIENTE, NOME, COGNOME, EMAIL, TELEFONO)
VALUES(3, 'Luigi', 'Verdi', 'luigi@email.com', 555555555);
  INSERT INTO CLIENTE (IDCLIENTE, NOME, COGNOME, EMAIL, TELEFONO)
VALUES(4, 'Giovanna', 'Ferrari', 'giovanna@email.com', 111111111);
  INSERT INTO CLIENTE (IDCLIENTE, NOME, COGNOME, EMAIL, TELEFONO)
VALUES(5, 'Roberto', 'Russo', 'roberto@email.com', 999989999);
  INSERT INTO CLIENTE (IDCLIENTE, NOME, COGNOME, EMAIL, TELEFONO)
VALUES(6, 'Chiara', 'Romano', 'chiara@email.com', 777777777);
 INSERT INTO CLIENTE (IDCLIENTE, NOME, COGNOME, EMAIL, TELEFONO)
VALUES (7, 'Alessandro', 'Gallo', 'alessandro@email.com', 444444444);
  INSERT INTO CLIENTE (IDCLIENTE, NOME, COGNOME, EMAIL, TELEFONO)
VALUES(8, 'Sara', 'Rizzo', 'sara@email.com', 222222222);
 INSERT INTO CLIENTE (IDCLIENTE, NOME, COGNOME, EMAIL, TELEFONO)
VALUES(9, 'Marco', 'Lombardi', 'marco@email.com', 888888888);
  INSERT INTO CLIENTE (IDCLIENTE, NOME, COGNOME, EMAIL, TELEFONO)
VALUES(10, 'Francesca', 'Moretti', 'francesca@email.com', 666666666);
  INSERT INTO CLIENTE (IDCLIENTE, NOME, COGNOME, EMAIL, TELEFONO)
VALUES(11, 'Antonio', 'Conti', 'antonio@email.com', 333332333);
  INSERT INTO CLIENTE (IDCLIENTE, NOME, COGNOME, EMAIL, TELEFONO)
VALUES(12, 'Valeria', 'Marchetti', 'valeria@email.com', 555555855);
  INSERT INTO CLIENTE (IDCLIENTE, NOME, COGNOME, EMAIL, TELEFONO)
VALUES(13, 'Giovanni', 'Santoro', 'giovanni@email.com', 777677777);
  INSERT INTO CLIENTE (IDCLIENTE, NOME, COGNOME, EMAIL, TELEFONO)
VALUES(14, 'Elena', 'Gatti', 'elena@email.com', 999999959);
  INSERT INTO CLIENTE (IDCLIENTE, NOME, COGNOME, EMAIL, TELEFONO)
VALUES(15, 'Fabio', 'Pellegrini', 'fabio@email.com', 111711111);

/*Popolamento tabella fattura*/
INSERT INTO FATTURA (IDFATTURA, DATAEMISSIONE, TOTALE)
VALUES(1, TO_DATE('2023-06-01', 'YYYY-MM-DD'), 100.50);
  INSERT INTO FATTURA (IDFATTURA, DATAEMISSIONE, TOTALE)
VALUES(2, TO_DATE('2023-06-02', 'YYYY-MM-DD'), 75.20);
  INSERT INTO FATTURA (IDFATTURA, DATAEMISSIONE, TOTALE)
VALUES(3, TO_DATE('2023-06-03', 'YYYY-MM-DD'), 150.00);
  INSERT INTO FATTURA (IDFATTURA, DATAEMISSIONE, TOTALE)
VALUES(4, TO_DATE('2023-06-04', 'YYYY-MM-DD'), 50.80);
  INSERT INTO FATTURA (IDFATTURA, DATAEMISSIONE, TOTALE)
VALUES(5, TO_DATE('2023-06-05', 'YYYY-MM-DD'), 90.10);
  INSERT INTO FATTURA (IDFATTURA, DATAEMISSIONE, TOTALE)
VALUES(6, TO_DATE('2023-06-06', 'YYYY-MM-DD'), 120.75);
  INSERT INTO FATTURA (IDFATTURA, DATAEMISSIONE, TOTALE)
VALUES(7, TO_DATE('2023-06-07', 'YYYY-MM-DD'), 80.30);
 INSERT INTO FATTURA (IDFATTURA, DATAEMISSIONE, TOTALE)
VALUES (8, TO_DATE('2023-06-08', 'YYYY-MM-DD'), 65.50);
 INSERT INTO FATTURA (IDFATTURA, DATAEMISSIONE, TOTALE)
VALUES (9, TO_DATE('2023-06-09', 'YYYY-MM-DD'), 95.40);
INSERT INTO FATTURA (IDFATTURA, DATAEMISSIONE, TOTALE)
VALUES  (10, TO_DATE('2023-06-10', 'YYYY-MM-DD'), 110.00);
 INSERT INTO FATTURA (IDFATTURA, DATAEMISSIONE, TOTALE)
VALUES (11, TO_DATE('2023-06-11', 'YYYY-MM-DD'), 70.25);
 INSERT INTO FATTURA (IDFATTURA, DATAEMISSIONE, TOTALE)
VALUES (12, TO_DATE('2023-06-12', 'YYYY-MM-DD'), 130.80);
 INSERT INTO FATTURA (IDFATTURA, DATAEMISSIONE, TOTALE)
VALUES (13, TO_DATE('2023-06-13', 'YYYY-MM-DD'), 85.90);
 INSERT INTO FATTURA (IDFATTURA, DATAEMISSIONE, TOTALE)
VALUES (14, TO_DATE('2023-06-14', 'YYYY-MM-DD'), 45.60);
 INSERT INTO FATTURA (IDFATTURA, DATAEMISSIONE, TOTALE)
VALUES (15, TO_DATE('2023-06-15', 'YYYY-MM-DD'), 105.15);

/*Popolamento tabella spedizione*/
INSERT INTO SPEDIZIONE (IDSPEDIZIONE, TEL, NOME, COGNOME, VIA, CITTA, CAP)
VALUES(1, 123456789, 'Mario', 'Rossi', 'Via Roma 1', 'Milano', 20121);
  INSERT INTO SPEDIZIONE (IDSPEDIZIONE, TEL, NOME, COGNOME, VIA, CITTA, CAP)
VALUES(2, 987654321, 'Laura', 'Bianchi', 'Via Verdi 5', 'Roma', 00185);
  INSERT INTO SPEDIZIONE (IDSPEDIZIONE, TEL, NOME, COGNOME, VIA, CITTA, CAP)
VALUES(3, 555555555, 'Luigi', 'Verdi', 'Via Garibaldi 10', 'Napoli', 80100);
  INSERT INTO SPEDIZIONE (IDSPEDIZIONE, TEL, NOME, COGNOME, VIA, CITTA, CAP)
VALUES(4, 111111111, 'Giovanna', 'Ferrari', 'Via Mazzini 3', 'Firenze', 50123);
  INSERT INTO SPEDIZIONE (IDSPEDIZIONE, TEL, NOME, COGNOME, VIA, CITTA, CAP)
VALUES(5, 999999999, 'Roberto', 'Russo', 'Via Libertà 8', 'Palermo', 90100);
  INSERT INTO SPEDIZIONE (IDSPEDIZIONE, TEL, NOME, COGNOME, VIA, CITTA, CAP)
VALUES(6, 777777777, 'Chiara', 'Romano', 'Via Manzoni 12', 'Torino', 10100);
  INSERT INTO SPEDIZIONE (IDSPEDIZIONE, TEL, NOME, COGNOME, VIA, CITTA, CAP)
VALUES(7, 444444444, 'Alessandro', 'Gallo', 'Via Dante 7', 'Bologna', 40100);
  INSERT INTO SPEDIZIONE (IDSPEDIZIONE, TEL, NOME, COGNOME, VIA, CITTA, CAP)
VALUES(8, 222222222, 'Sara', 'Rizzo', 'Via Cavour 15', 'Genova', 16100);
  INSERT INTO SPEDIZIONE (IDSPEDIZIONE, TEL, NOME, COGNOME, VIA, CITTA, CAP)
VALUES(9, 888888888, 'Marco', 'Lombardi', 'Via Milano 4', 'Bari', 70100);
  INSERT INTO SPEDIZIONE (IDSPEDIZIONE, TEL, NOME, COGNOME, VIA, CITTA, CAP)
VALUES(10, 666666666, 'Francesca', 'Moretti', 'Via Carducci 6', 'Verona', 37100);
  INSERT INTO SPEDIZIONE (IDSPEDIZIONE, TEL, NOME, COGNOME, VIA, CITTA, CAP)
VALUES(11, 333333333, 'Antonio', 'Conti', 'Via Garibaldi 20', 'Trieste', 34100);
  INSERT INTO SPEDIZIONE (IDSPEDIZIONE, TEL, NOME, COGNOME, VIA, CITTA, CAP)
VALUES(12, 555555555, 'Valeria', 'Marchetti', 'Via Mazzini 3', 'Padova', 35100);
  INSERT INTO SPEDIZIONE (IDSPEDIZIONE, TEL, NOME, COGNOME, VIA, CITTA, CAP)
VALUES(13, 777777777, 'Giovanni', 'Santoro', 'Via Leopardi 9', 'Perugia', 06100);
  INSERT INTO SPEDIZIONE (IDSPEDIZIONE, TEL, NOME, COGNOME, VIA, CITTA, CAP)
VALUES(14, 999999999, 'Elena', 'Gatti', 'Via Manzoni 18', 'Cagliari', 09100);
  INSERT INTO SPEDIZIONE (IDSPEDIZIONE, TEL, NOME, COGNOME, VIA, CITTA, CAP)
VALUES(15, 111111111, 'Fabio', 'Pellegrini', 'Via Garibaldi 5', 'Catania', 95100);

/*Popolamento tabella ordine*/
  INSERT INTO ORDINE (IDORDINE, IDFATTURA, IDCLIENTE, IDSPEDIZIONE, NUMEROPRODOTTI, DATACREAZIONE)
VALUES(1, 1, 1, 1, 3, TO_DATE('2023-06-01', 'YYYY-MM-DD'));
  INSERT INTO ORDINE (IDORDINE, IDFATTURA, IDCLIENTE, IDSPEDIZIONE, NUMEROPRODOTTI, DATACREAZIONE)
VALUES  (2, 2, 2, 2, 2, TO_DATE('2023-06-02', 'YYYY-MM-DD'));  
  INSERT INTO ORDINE (IDORDINE, IDFATTURA, IDCLIENTE, IDSPEDIZIONE, NUMEROPRODOTTI, DATACREAZIONE)
VALUES(3, 3, 3, 3, 1, TO_DATE('2023-06-03', 'YYYY-MM-DD'));
  INSERT INTO ORDINE (IDORDINE, IDFATTURA, IDCLIENTE, IDSPEDIZIONE, NUMEROPRODOTTI, DATACREAZIONE)
VALUES(4, 4, 4, 4, 4, TO_DATE('2023-06-04', 'YYYY-MM-DD'));
  INSERT INTO ORDINE (IDORDINE, IDFATTURA, IDCLIENTE, IDSPEDIZIONE, NUMEROPRODOTTI, DATACREAZIONE)
VALUES(5, 5, 5, 5, 2, TO_DATE('2023-06-05', 'YYYY-MM-DD'));
  INSERT INTO ORDINE (IDORDINE, IDFATTURA, IDCLIENTE, IDSPEDIZIONE, NUMEROPRODOTTI, DATACREAZIONE)
VALUES(6, 6, 6, 6, 3, TO_DATE('2023-06-06', 'YYYY-MM-DD'));
  INSERT INTO ORDINE (IDORDINE, IDFATTURA, IDCLIENTE, IDSPEDIZIONE, NUMEROPRODOTTI, DATACREAZIONE)
VALUES(7, 7, 7, 7, 2, TO_DATE('2023-06-07', 'YYYY-MM-DD'));
  INSERT INTO ORDINE (IDORDINE, IDFATTURA, IDCLIENTE, IDSPEDIZIONE, NUMEROPRODOTTI, DATACREAZIONE)
VALUES(8, 8, 8, 8, 1, TO_DATE('2023-06-08', 'YYYY-MM-DD'));
  INSERT INTO ORDINE (IDORDINE, IDFATTURA, IDCLIENTE, IDSPEDIZIONE, NUMEROPRODOTTI, DATACREAZIONE)
VALUES(9, 9, 9, 9, 4, TO_DATE('2023-06-09', 'YYYY-MM-DD'));
  INSERT INTO ORDINE (IDORDINE, IDFATTURA, IDCLIENTE, IDSPEDIZIONE, NUMEROPRODOTTI, DATACREAZIONE)
VALUES(10, 10, 10, 10, 3, TO_DATE('2023-06-10', 'YYYY-MM-DD'));
  INSERT INTO ORDINE (IDORDINE, IDFATTURA, IDCLIENTE, IDSPEDIZIONE, NUMEROPRODOTTI, DATACREAZIONE)
VALUES(11, 11, 11, 11, 2, TO_DATE('2023-06-11', 'YYYY-MM-DD'));
  INSERT INTO ORDINE (IDORDINE, IDFATTURA, IDCLIENTE, IDSPEDIZIONE, NUMEROPRODOTTI, DATACREAZIONE)
VALUES(12, 12, 12, 12, 1, TO_DATE('2023-06-12', 'YYYY-MM-DD'));
  INSERT INTO ORDINE (IDORDINE, IDFATTURA, IDCLIENTE, IDSPEDIZIONE, NUMEROPRODOTTI, DATACREAZIONE)
VALUES(13, 13, 13, 13, 4, TO_DATE('2023-06-13', 'YYYY-MM-DD'));
  INSERT INTO ORDINE (IDORDINE, IDFATTURA, IDCLIENTE, IDSPEDIZIONE, NUMEROPRODOTTI, DATACREAZIONE)
VALUES(14, 14, 14, 14, 2, TO_DATE('2023-06-14', 'YYYY-MM-DD'));
  INSERT INTO ORDINE (IDORDINE, IDFATTURA, IDCLIENTE, IDSPEDIZIONE, NUMEROPRODOTTI, DATACREAZIONE)
VALUES(15, 15, 15, 15, 3, TO_DATE('2023-06-15', 'YYYY-MM-DD'));

/*Popolamento tabella componente*/
  INSERT INTO COMPONENTE (EAN, NOME, PREZZO) 
VALUES(1001, 'Componente 1', 10.99);
  INSERT INTO COMPONENTE (EAN, NOME, PREZZO) 
VALUES(1002, 'Componente 2', 12.99);
  INSERT INTO COMPONENTE (EAN, NOME, PREZZO)
VALUES(1003, 'Componente 3', 8.99);
  INSERT INTO COMPONENTE (EAN, NOME, PREZZO)
VALUES(1004, 'Componente 4', 14.99);
  INSERT INTO COMPONENTE (EAN, NOME, PREZZO)
VALUES(1005, 'Componente 5', 9.99);
  INSERT INTO COMPONENTE (EAN, NOME, PREZZO)
VALUES(1006, 'Componente 6', 11.99);
  INSERT INTO COMPONENTE (EAN, NOME, PREZZO)
VALUES(1007, 'Componente 7', 13.99);
  INSERT INTO COMPONENTE (EAN, NOME, PREZZO)
VALUES(1008, 'Componente 8', 7.99);
  INSERT INTO COMPONENTE (EAN, NOME, PREZZO)
VALUES(1009, 'Componente 9', 16.99);
  INSERT INTO COMPONENTE (EAN, NOME, PREZZO)
VALUES(1010, 'Componente 10', 10.49);
  INSERT INTO COMPONENTE (EAN, NOME, PREZZO)
VALUES(1011, 'Componente 11', 9.49);
  INSERT INTO COMPONENTE (EAN, NOME, PREZZO)
VALUES(1012, 'Componente 12', 15.99);
  INSERT INTO COMPONENTE (EAN, NOME, PREZZO)
VALUES(1013, 'Componente 13', 11.49);
  INSERT INTO COMPONENTE (EAN, NOME, PREZZO)
VALUES(1014, 'Componente 14', 8.49);
  INSERT INTO COMPONENTE (EAN, NOME, PREZZO)
VALUES(1015, 'Componente 15', 13.49);

/*Popolamento tabella progetto*/
INSERT INTO PROGETTO (IDPROG, NOME, DATAINIZIO)
VALUES(1, 'Progetto 1', TO_DATE('2023-01-01', 'YYYY-MM-DD'));
  INSERT INTO PROGETTO (IDPROG, NOME, DATAINIZIO)
VALUES(2, 'Progetto 2', TO_DATE('2023-02-01', 'YYYY-MM-DD'));
  INSERT INTO PROGETTO (IDPROG, NOME, DATAINIZIO)
VALUES(3, 'Progetto 3', TO_DATE('2023-03-01', 'YYYY-MM-DD'));
  INSERT INTO PROGETTO (IDPROG, NOME, DATAINIZIO)
VALUES(4, 'Progetto 4', TO_DATE('2023-04-01', 'YYYY-MM-DD'));
 INSERT INTO PROGETTO (IDPROG, NOME, DATAINIZIO)
VALUES(5, 'Progetto 5', TO_DATE('2023-05-01', 'YYYY-MM-DD'));
  INSERT INTO PROGETTO (IDPROG, NOME, DATAINIZIO)
VALUES(6, 'Progetto 6', TO_DATE('2023-06-01', 'YYYY-MM-DD'));
  INSERT INTO PROGETTO (IDPROG, NOME, DATAINIZIO)
VALUES(7, 'Progetto 7', TO_DATE('2023-07-01', 'YYYY-MM-DD'));
  INSERT INTO PROGETTO (IDPROG, NOME, DATAINIZIO)
VALUES(8, 'Progetto 8', TO_DATE('2023-08-01', 'YYYY-MM-DD'));
  INSERT INTO PROGETTO (IDPROG, NOME, DATAINIZIO)
VALUES(9, 'Progetto 9', TO_DATE('2023-09-01', 'YYYY-MM-DD'));
  INSERT INTO PROGETTO (IDPROG, NOME, DATAINIZIO)
VALUES(10, 'Progetto 10', TO_DATE('2023-10-01', 'YYYY-MM-DD'));
  INSERT INTO PROGETTO (IDPROG, NOME, DATAINIZIO)
VALUES  (11, 'Progetto 11', TO_DATE('2023-11-01', 'YYYY-MM-DD'));
  INSERT INTO PROGETTO (IDPROG, NOME, DATAINIZIO)
VALUES(12, 'Progetto 12', TO_DATE('2023-12-01', 'YYYY-MM-DD'));
  INSERT INTO PROGETTO (IDPROG, NOME, DATAINIZIO)
VALUES(13, 'Progetto 13', TO_DATE('2024-01-01', 'YYYY-MM-DD'));
  INSERT INTO PROGETTO (IDPROG, NOME, DATAINIZIO)
VALUES(14, 'Progetto 14', TO_DATE('2024-02-01', 'YYYY-MM-DD'));
  INSERT INTO PROGETTO (IDPROG, NOME, DATAINIZIO)
VALUES(15, 'Progetto 15', TO_DATE('2024-03-01', 'YYYY-MM-DD'));

/*Popolamento tabella componentiprogetto*/                                               
  INSERT INTO COMPONENTIPROGETTO (IDPROG, EAN, QUANTITA) VALUES  (1, 1001, 2);
  INSERT INTO COMPONENTIPROGETTO (IDPROG, EAN, QUANTITA) VALUES  (1, 1002, 1);
  INSERT INTO COMPONENTIPROGETTO (IDPROG, EAN, QUANTITA) VALUES  (1, 1003, 3);
  INSERT INTO COMPONENTIPROGETTO (IDPROG, EAN, QUANTITA) VALUES  (2, 1001, 4);
  INSERT INTO COMPONENTIPROGETTO (IDPROG, EAN, QUANTITA) VALUES  (2, 1004, 2);
  INSERT INTO COMPONENTIPROGETTO (IDPROG, EAN, QUANTITA) VALUES  (3, 1002, 2);
  INSERT INTO COMPONENTIPROGETTO (IDPROG, EAN, QUANTITA) VALUES  (3, 1005, 1);
  INSERT INTO COMPONENTIPROGETTO (IDPROG, EAN, QUANTITA) VALUES  (4, 1003, 3);
  INSERT INTO COMPONENTIPROGETTO (IDPROG, EAN, QUANTITA) VALUES  (5, 1001, 2);
  INSERT INTO COMPONENTIPROGETTO (IDPROG, EAN, QUANTITA) VALUES  (5, 1004, 1);
  INSERT INTO COMPONENTIPROGETTO (IDPROG, EAN, QUANTITA) VALUES  (6, 1002, 3);
  INSERT INTO COMPONENTIPROGETTO (IDPROG, EAN, QUANTITA) VALUES  (7, 1005, 2);
  INSERT INTO COMPONENTIPROGETTO (IDPROG, EAN, QUANTITA) VALUES  (8, 1001, 1);
  INSERT INTO COMPONENTIPROGETTO (IDPROG, EAN, QUANTITA) VALUES  (9, 1001, 3);
  INSERT INTO COMPONENTIPROGETTO (IDPROG, EAN, QUANTITA) VALUES  (10, 1003, 2); 

/*Popolamento tabella contiene*/
  INSERT INTO CONTIENE (IDPROG, IDORDINE, QUANTITA) VALUES (1, 1, 2);
  INSERT INTO CONTIENE (IDPROG, IDORDINE, QUANTITA) VALUES (1, 2, 1);
  INSERT INTO CONTIENE (IDPROG, IDORDINE, QUANTITA) VALUES  (2, 3, 3);
  INSERT INTO CONTIENE (IDPROG, IDORDINE, QUANTITA) VALUES(2, 4, 4);
  INSERT INTO CONTIENE (IDPROG, IDORDINE, QUANTITA) VALUES(3, 5, 2);
  INSERT INTO CONTIENE (IDPROG, IDORDINE, QUANTITA) VALUES(3, 6, 1);
  INSERT INTO CONTIENE (IDPROG, IDORDINE, QUANTITA) VALUES(4, 7, 3);
  INSERT INTO CONTIENE (IDPROG, IDORDINE, QUANTITA) VALUES(4, 8, 2);
  INSERT INTO CONTIENE (IDPROG, IDORDINE, QUANTITA) VALUES(5, 9, 1);
  INSERT INTO CONTIENE (IDPROG, IDORDINE, QUANTITA) VALUES(5, 10, 2);
  INSERT INTO CONTIENE (IDPROG, IDORDINE, QUANTITA) VALUES(6, 11, 3);
  INSERT INTO CONTIENE (IDPROG, IDORDINE, QUANTITA) VALUES(7, 12, 2);
  INSERT INTO CONTIENE (IDPROG, IDORDINE, QUANTITA) VALUES(8, 13, 1);
  INSERT INTO CONTIENE (IDPROG, IDORDINE, QUANTITA) VALUES(9, 14, 4);
  INSERT INTO CONTIENE (IDPROG, IDORDINE, QUANTITA) VALUES(10, 15, 3);

/*Popolamento tabella fornitore*/
  INSERT INTO FORNITORE (PARTITAIVA, VIA, CIVICO, CITTA, CAP, TEL)
VALUES ('12345678901', 'Via Roma', 10, 'Milano', 20100, '0123456789');
  INSERT INTO FORNITORE (PARTITAIVA, VIA, CIVICO, CITTA, CAP, TEL)
VALUES  ('23456789012', 'Via Verdi', 20, 'Roma', 00100, '0234567890');
  INSERT INTO FORNITORE (PARTITAIVA, VIA, CIVICO, CITTA, CAP, TEL)
VALUES ('34567890123', 'Via Italia', 30, 'Napoli', 80100, '0345678901');
  INSERT INTO FORNITORE (PARTITAIVA, VIA, CIVICO, CITTA, CAP, TEL)
VALUES('45678901234', 'Via Firenze', 40, 'Torino', 10100, '0456789012');
  INSERT INTO FORNITORE (PARTITAIVA, VIA, CIVICO, CITTA, CAP, TEL)
VALUES('56789012345', 'Via Venezia', 50, 'Firenze', 50100, '0567890123');
  INSERT INTO FORNITORE (PARTITAIVA, VIA, CIVICO, CITTA, CAP, TEL)
VALUES('67890123456', 'Via Bologna', 60, 'Palermo', 90100, '0678901234');
  INSERT INTO FORNITORE (PARTITAIVA, VIA, CIVICO, CITTA, CAP, TEL)
VALUES('78901234567', 'Via Genova', 70, 'Genova', 16100, '0789012345');
  INSERT INTO FORNITORE (PARTITAIVA, VIA, CIVICO, CITTA, CAP, TEL)
VALUES('89012345678', 'Via Milano', 80, 'Bologna', 40100, '0890123456');
  INSERT INTO FORNITORE (PARTITAIVA, VIA, CIVICO, CITTA, CAP, TEL)
VALUES('90123456789', 'Via Napoli', 90, 'Verona', 37100, '0901234567');
  INSERT INTO FORNITORE (PARTITAIVA, VIA, CIVICO, CITTA, CAP, TEL)
VALUES('01234567890', 'Via Torino', 100, 'Venezia', 30100, '0012345678');
  INSERT INTO FORNITORE (PARTITAIVA, VIA, CIVICO, CITTA, CAP, TEL)
VALUES('11223344556', 'Via Palermo', 110, 'Cagliari', 90100, '1122334455');
  INSERT INTO FORNITORE (PARTITAIVA, VIA, CIVICO, CITTA, CAP, TEL)
VALUES('22334455667', 'Via Genova', 120, 'Napoli', 80100, '2233445566');
  INSERT INTO FORNITORE (PARTITAIVA, VIA, CIVICO, CITTA, CAP, TEL)
VALUES('33445566778', 'Via Firenze', 130, 'Milano', 20100, '3344556677');
 INSERT INTO FORNITORE (PARTITAIVA, VIA, CIVICO, CITTA, CAP, TEL)
VALUES ('44556677889', 'Via Roma', 140, 'Roma', 00100, '4455667788');
  INSERT INTO FORNITORE (PARTITAIVA, VIA, CIVICO, CITTA, CAP, TEL)
VALUES('55667788990', 'Via Verdi', 150, 'Torino', 10100, '5566778899');

/*Popolamento tabella fornitura*/
INSERT INTO FORNITURA (PARTITAIVAFORNITORE, EANCOMPONENTE, QUANTITA, DATAACQUISTO) 
VALUES ('12345678901', 1001, 5, TO_DATE('2023-06-01', 'YYYY-MM-DD'));
INSERT INTO FORNITURA (PARTITAIVAFORNITORE, EANCOMPONENTE, QUANTITA, DATAACQUISTO) 
VALUES ('23456789012', 1002, 3, TO_DATE('2023-06-02', 'YYYY-MM-DD'));
INSERT INTO FORNITURA (PARTITAIVAFORNITORE, EANCOMPONENTE, QUANTITA, DATAACQUISTO) 
VALUES ('34567890123', 1003, 7, TO_DATE('2023-06-03', 'YYYY-MM-DD'));
INSERT INTO FORNITURA (PARTITAIVAFORNITORE, EANCOMPONENTE, QUANTITA, DATAACQUISTO) 
VALUES ('45678901234', 1004, 4, TO_DATE('2023-06-04', 'YYYY-MM-DD'));
INSERT INTO FORNITURA (PARTITAIVAFORNITORE, EANCOMPONENTE, QUANTITA, DATAACQUISTO) 
VALUES ('56789012345', 1005, 10, TO_DATE('2023-06-05', 'YYYY-MM-DD'));
INSERT INTO FORNITURA (PARTITAIVAFORNITORE, EANCOMPONENTE, QUANTITA, DATAACQUISTO) 
VALUES ('67890123456', 1006, 6, TO_DATE('2023-06-06', 'YYYY-MM-DD'));
INSERT INTO FORNITURA (PARTITAIVAFORNITORE, EANCOMPONENTE, QUANTITA, DATAACQUISTO) 
VALUES ('78901234567', 1007, 2, TO_DATE('2023-06-07', 'YYYY-MM-DD'));
INSERT INTO FORNITURA (PARTITAIVAFORNITORE, EANCOMPONENTE, QUANTITA, DATAACQUISTO) 
VALUES ('89012345678', 1008, 8, TO_DATE('2023-06-08', 'YYYY-MM-DD'));
INSERT INTO FORNITURA (PARTITAIVAFORNITORE, EANCOMPONENTE, QUANTITA, DATAACQUISTO) 
VALUES ('90123456789', 1009, 9, TO_DATE('2023-06-09', 'YYYY-MM-DD'));
INSERT INTO FORNITURA (PARTITAIVAFORNITORE, EANCOMPONENTE, QUANTITA, DATAACQUISTO) 
VALUES ('01234567890', 1010, 7, TO_DATE('2023-06-10', 'YYYY-MM-DD'));
INSERT INTO FORNITURA (PARTITAIVAFORNITORE, EANCOMPONENTE, QUANTITA, DATAACQUISTO) 
VALUES ('11223344556', 1011, 3, TO_DATE('2023-06-11', 'YYYY-MM-DD'));
INSERT INTO FORNITURA (PARTITAIVAFORNITORE, EANCOMPONENTE, QUANTITA, DATAACQUISTO) 
VALUES ('22334455667', 1012, 6, TO_DATE('2023-06-12', 'YYYY-MM-DD'));
INSERT INTO FORNITURA (PARTITAIVAFORNITORE, EANCOMPONENTE, QUANTITA, DATAACQUISTO) 
VALUES ('33445566778', 1013, 4, TO_DATE('2023-06-13', 'YYYY-MM-DD'));
INSERT INTO FORNITURA (PARTITAIVAFORNITORE, EANCOMPONENTE, QUANTITA, DATAACQUISTO) 
VALUES ('44556677889', 1014, 10, TO_DATE('2023-06-14', 'YYYY-MM-DD'));
INSERT INTO FORNITURA (PARTITAIVAFORNITORE, EANCOMPONENTE, QUANTITA, DATAACQUISTO) 
VALUES ('55667788990', 1015, 8, TO_DATE('2023-06-15', 'YYYY-MM-DD'));

/*Popolamento tabella reparto*/
INSERT INTO REPARTO (IDREPARTO, TELEFONO, DIPENDENTIMAX) VALUES
(1, '1234567890', 5);
INSERT INTO REPARTO (IDREPARTO, TELEFONO, DIPENDENTIMAX) VALUES
(2, '9876543210', 5);
INSERT INTO REPARTO (IDREPARTO, TELEFONO, DIPENDENTIMAX) VALUES
(3, '1111111111', 5);
INSERT INTO REPARTO (IDREPARTO, TELEFONO, DIPENDENTIMAX) VALUES
(4, '2222222222', 5);
INSERT INTO REPARTO (IDREPARTO, TELEFONO, DIPENDENTIMAX) VALUES
(5, '3333333333', 5);
INSERT INTO REPARTO (IDREPARTO, TELEFONO, DIPENDENTIMAX) VALUES
(6, '4444444444', 5);
INSERT INTO REPARTO (IDREPARTO, TELEFONO, DIPENDENTIMAX) VALUES
(7, '5555555555', 5);
INSERT INTO REPARTO (IDREPARTO, TELEFONO, DIPENDENTIMAX) VALUES
(8, '6666666666', 5);
INSERT INTO REPARTO (IDREPARTO, TELEFONO, DIPENDENTIMAX) VALUES
(9, '7777777777', 5);
INSERT INTO REPARTO (IDREPARTO, TELEFONO, DIPENDENTIMAX) VALUES
(10, '8888888888',5);
INSERT INTO REPARTO (IDREPARTO, TELEFONO, DIPENDENTIMAX) VALUES
(11, '9999999999',5);
INSERT INTO REPARTO (IDREPARTO, TELEFONO, DIPENDENTIMAX) VALUES
(12, '1010101010',5);
INSERT INTO REPARTO (IDREPARTO, TELEFONO, DIPENDENTIMAX) VALUES
(13, '1212121212',5);
INSERT INTO REPARTO (IDREPARTO, TELEFONO, DIPENDENTIMAX) VALUES
(14, '1313131313',5);
INSERT INTO REPARTO (IDREPARTO, TELEFONO, DIPENDENTIMAX) VALUES
(15, '1414141414',5);
INSERT INTO REPARTO (IDREPARTO, TELEFONO, DIPENDENTIMAX) VALUES
(16, '1515151515',5);

/*Popolamento tabella progettazione*/
INSERT INTO PROGETTAZIONE (IDREPARTO, STIMATEMPO, IDPROG) VALUES
(1, 35, 1);
INSERT INTO PROGETTAZIONE (IDREPARTO, STIMATEMPO, IDPROG) VALUES
(2, 22, 2);
INSERT INTO PROGETTAZIONE (IDREPARTO, STIMATEMPO, IDPROG) VALUES
(3, 15, 3);
INSERT INTO PROGETTAZIONE (IDREPARTO, STIMATEMPO, IDPROG) VALUES
(4, 26, 4);

/*Popolamento tabella produzione*/
INSERT INTO produzione (IDREPARTO, NMACCHINE) VALUES
(5,  12);
INSERT INTO produzione (IDREPARTO, NMACCHINE) VALUES
(6,  16);
INSERT INTO produzione (IDREPARTO, NMACCHINE) VALUES
(7,  17);
INSERT INTO produzione (IDREPARTO, NMACCHINE) VALUES
(8,  21);

/*Popolamento tabella collaudo*/
INSERT INTO COLLAUDO(IDREPARTO, NMACCHINE) VALUES 
(9,12);
INSERT INTO COLLAUDO(IDREPARTO, NMACCHINE) VALUES 
(10,32);
INSERT INTO COLLAUDO(IDREPARTO, NMACCHINE) VALUES 
(11,22);
INSERT INTO COLLAUDO(IDREPARTO, NMACCHINE) VALUES 
(12,15);

/*Popolamento tabella magazzino*/
INSERT INTO MAGAZZINO(IDREPARTO, SPAZIOTOT) VALUES
 (13,50);
INSERT INTO MAGAZZINO(IDREPARTO, SPAZIOTOT) VALUES
 (14,50);
INSERT INTO MAGAZZINO(IDREPARTO, SPAZIOTOT) VALUES
 (15,50);
INSERT INTO MAGAZZINO(IDREPARTO, SPAZIOTOT) VALUES
 (16,50);

/*Popolamento tabella immagazzinamento*/
INSERT INTO IMMAGAZZINAMENTO (IDLOTTO, SPAZIOOCCUPATO, ORARIO, DATAIMM, QUANTITA, PARTITAIVA, EAN, IDREPARTO)
  VALUES (1, 10, TO_DATE('2023-06-13 08:30:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-13', 'YYYY-MM-DD'), 50, '12345678901', 1001, 16);
INSERT INTO IMMAGAZZINAMENTO (IDLOTTO, SPAZIOOCCUPATO, ORARIO, DATAIMM, QUANTITA, PARTITAIVA, EAN, IDREPARTO)
  VALUES (2, 15, TO_DATE('2023-06-14 09:15:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-14', 'YYYY-MM-DD'), 30, '23456789012', 1002, 16);
INSERT INTO IMMAGAZZINAMENTO (IDLOTTO, SPAZIOOCCUPATO, ORARIO, DATAIMM, QUANTITA, PARTITAIVA, EAN, IDREPARTO)
  VALUES (3, 8, TO_DATE('2023-06-15 10:45:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-15', 'YYYY-MM-DD'), 20, '45678901234', 1002, 13);
INSERT INTO IMMAGAZZINAMENTO (IDLOTTO, SPAZIOOCCUPATO, ORARIO, DATAIMM, QUANTITA, PARTITAIVA, EAN, IDREPARTO)
  VALUES (4, 12, TO_DATE('2023-06-16 14:20:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-16', 'YYYY-MM-DD'), 40, '01234567890', 1004, 14);
INSERT INTO IMMAGAZZINAMENTO (IDLOTTO, SPAZIOOCCUPATO, ORARIO, DATAIMM, QUANTITA, PARTITAIVA, EAN, IDREPARTO)
  VALUES (5, 5, TO_DATE('2023-06-17 11:10:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-17', 'YYYY-MM-DD'), 10, '89012345678', 1005, 15);
INSERT INTO IMMAGAZZINAMENTO (IDLOTTO, SPAZIOOCCUPATO, ORARIO, DATAIMM, QUANTITA, PARTITAIVA, EAN, IDREPARTO)
  VALUES (6, 20, TO_DATE('2023-06-18 13:45:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-18', 'YYYY-MM-DD'), 60, '23456789012', 1007, 16);
INSERT INTO IMMAGAZZINAMENTO (IDLOTTO, SPAZIOOCCUPATO, ORARIO, DATAIMM, QUANTITA, PARTITAIVA, EAN, IDREPARTO)
  VALUES (7, 7, TO_DATE('2023-06-19 09:55:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-19', 'YYYY-MM-DD'), 15, '34567890123', 1008, 14);
INSERT INTO IMMAGAZZINAMENTO (IDLOTTO, SPAZIOOCCUPATO, ORARIO, DATAIMM, QUANTITA, PARTITAIVA, EAN, IDREPARTO)
  VALUES (8, 14, TO_DATE('2023-06-20 12:30:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-20', 'YYYY-MM-DD'), 35, '56789012345', 1014, 15);
INSERT INTO IMMAGAZZINAMENTO (IDLOTTO, SPAZIOOCCUPATO, ORARIO, DATAIMM, QUANTITA, PARTITAIVA, EAN, IDREPARTO)
  VALUES (9, 9, TO_DATE('2023-06-21 15:05:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-21', 'YYYY-MM-DD'), 25, '89012345678', 1015, 16);
INSERT INTO IMMAGAZZINAMENTO (IDLOTTO, SPAZIOOCCUPATO, ORARIO, DATAIMM, QUANTITA, PARTITAIVA, EAN, IDREPARTO)
  VALUES (10, 18, TO_DATE('2023-06-22 10:40:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-22', 'YYYY-MM-DD'), 55, '01234567890', 1010, 13);
INSERT INTO IMMAGAZZINAMENTO (IDLOTTO, SPAZIOOCCUPATO, ORARIO, DATAIMM, QUANTITA, PARTITAIVA, EAN, IDREPARTO)
  VALUES (11, 6, TO_DATE('2023-06-23 13:15:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-23', 'YYYY-MM-DD'), 12, '12345678901', 1013, 13);
INSERT INTO IMMAGAZZINAMENTO (IDLOTTO, SPAZIOOCCUPATO, ORARIO, DATAIMM, QUANTITA, PARTITAIVA, EAN, IDREPARTO)
  VALUES (12, 13, TO_DATE('2023-06-24 11:25:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-24', 'YYYY-MM-DD'), 28, '23456789012', 1015, 15);
INSERT INTO IMMAGAZZINAMENTO (IDLOTTO, SPAZIOOCCUPATO, ORARIO, DATAIMM, QUANTITA, PARTITAIVA, EAN, IDREPARTO)
  VALUES (13, 8, TO_DATE('2023-06-25 14:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-25', 'YYYY-MM-DD'), 18, '34567890123', 1013, 13);
INSERT INTO IMMAGAZZINAMENTO (IDLOTTO, SPAZIOOCCUPATO, ORARIO, DATAIMM, QUANTITA, PARTITAIVA, EAN, IDREPARTO)
  VALUES (14, 16, TO_DATE('2023-06-26 11:50:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-26', 'YYYY-MM-DD'), 45, '45678901234', 1008, 14);
INSERT INTO IMMAGAZZINAMENTO (IDLOTTO, SPAZIOOCCUPATO, ORARIO, DATAIMM, QUANTITA, PARTITAIVA, EAN, IDREPARTO)
  VALUES (15, 11, TO_DATE('2023-06-27 13:25:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-27', 'YYYY-MM-DD'), 33, '56789012345', 1015, 15);

/*Popolamento tabella dipendente*/
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (1, 'Mario', 'Rossi', 30000, 'Magazziniere');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (2, 'Luca', 'Bianchi', 25000, 'Operaio');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (3, 'Laura', 'Verdi', 35000, 'Ingegnere');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (4, 'Giovanni', 'Russo', 28000, 'Responsabile');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (5, 'Francesca', 'Esposito', 32000, 'Collaudatore');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (6, 'Marco', 'Romano', 27000, 'Magazziniere');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (7, 'Sara', 'Galli', 38000, 'Operaio'); 
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (8, 'Paolo', 'Conti', 29000, 'Ingegnere');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (9, 'Alessia', 'Ferrari', 33000, 'Responsabile');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (10, 'Simone', 'Martini', 26000, 'Collaudatore');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (11, 'Valentina', 'Rizzo', 31000, 'Magazziniere');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (12, 'Fabio', 'Colombo', 24000, 'Operaio');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (13, 'Elisa', 'Santoro', 37000, 'Ingegnere');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (14, 'Giuseppe', 'Moretti', 28000, 'Responsabile');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (15, 'Caterina', 'Gentile', 32000, 'Collaudatore');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (16, 'Antonio', 'Lombardi', 27000, 'Magazziniere');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (17, 'Elena', 'Pellegrini', 38000, 'Operaio');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (18, 'Roberto', 'Ricci', 29000, 'Ingegnere');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (19, 'Monica', 'Ferri', 33000, 'Responsabile');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (20, 'Davide', 'Greco', 26000, 'Collaudatore');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (21, 'Silvia', 'Marini', 31000, 'Magazziniere');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (22, 'Lorenzo', 'Fabbri', 24000, 'Operaio');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (23, 'Federica', 'Bellini', 37000, 'Ingegnere');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (24, 'Andrea', 'Gatti', 28000, 'Ingegnere');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (25, 'Martina', 'Palmieri', 32000, 'Collaudatore');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (26, 'Gabriele', 'Barbieri', 27000, 'Magazziniere');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (27, 'Chiara', 'Serra', 38000, 'Operaio');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (28, 'Stefano', 'Mancini', 29000, 'Ingegnere');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (29, 'Giulia', 'Villa', 33000, 'Operaio');
INSERT INTO DIPENDENTE (IDDIPENDENTE, NOME, COGNOME, RAL, TIPODIPENDENTE) VALUES (30, 'Mattia', 'Rinaldi', 26000, 'Collaudatore');

/*Popolamento tabella turno*/
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (1, 1, TO_DATE('2023-06-01 08:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-01 16:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (2, 2, TO_DATE('2023-06-01 13:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-01 21:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (3, 3, TO_DATE('2023-06-01 09:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-01 17:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (4, 1, TO_DATE('2023-06-01 10:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-01 18:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (5, 2, TO_DATE('2023-06-01 14:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-01 22:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (6, 3, TO_DATE('2023-06-01 11:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-01 19:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (7, 1, TO_DATE('2023-06-01 12:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-01 20:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (8, 2, TO_DATE('2023-06-01 15:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-01 23:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (9, 3, TO_DATE('2023-06-02 08:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-02 16:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (10, 1, TO_DATE('2023-06-02 13:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-02 21:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (11, 2, TO_DATE('2023-06-02 09:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-02 17:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (12, 3, TO_DATE('2023-06-02 10:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-02 18:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (13, 1, TO_DATE('2023-06-02 14:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-02 22:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (14, 2, TO_DATE('2023-06-02 11:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-02 19:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (15, 3, TO_DATE('2023-06-02 12:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-02 20:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (16, 1, TO_DATE('2023-06-02 15:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-02 23:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (17, 2, TO_DATE('2023-06-03 08:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-03 16:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (18, 3, TO_DATE('2023-06-03 13:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-03 21:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (19, 1, TO_DATE('2023-06-03 09:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-03 17:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (20, 2, TO_DATE('2023-06-03 10:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-03 18:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (21, 3, TO_DATE('2023-06-03 14:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-03 22:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (22, 1, TO_DATE('2023-06-03 11:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-03 19:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (23, 2, TO_DATE('2023-06-03 12:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-03 20:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (24, 3, TO_DATE('2023-06-04 08:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-04 16:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (25, 1, TO_DATE('2023-06-04 13:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-04 21:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (26, 2, TO_DATE('2023-06-04 09:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-04 17:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (27, 3, TO_DATE('2023-06-04 10:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-04 18:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (28, 1, TO_DATE('2023-06-04 14:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-04 22:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (29, 2, TO_DATE('2023-06-04 11:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-04 19:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TURNO (IDDIPENDENTE, IDREPARTO, ORAINIZIO, ORAFINE) VALUES
  (30, 3, TO_DATE('2023-06-04 12:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-06-04 20:00:00', 'YYYY-MM-DD HH24:MI:SS'));













--CREAZIONE PROCEDURE
CREATE OR REPLACE FUNCTION ordina_progetto(
  p_nome_cliente IN CLIENTE.NOME%TYPE,
  p_cognome_cliente IN CLIENTE.COGNOME%TYPE,
  p_email_cliente IN CLIENTE.EMAIL%TYPE,
  p_telefono_cliente IN CLIENTE.TELEFONO%TYPE,
  p_via_cliente IN CLIENTE.VIA%TYPE,
  p_citta_cliente IN CLIENTE.CITTA%TYPE,
  p_cap_cliente IN CLIENTE.CAP%TYPE,
  p_nome_progetto IN PROGETTO.NOME%TYPE
) RETURN NUMBER
IS
  v_id_cliente CLIENTE.IDCLIENTE%TYPE;
  v_id_ordine ORDINE.IDORDINE%TYPE;
  v_id_progetto PROGETTO.IDPROG%TYPE;
BEGIN
  -- Verifica se il cliente esiste già o se deve essere creato
  SELECT IDCLIENTE INTO v_id_cliente
  FROM CLIENTE
  WHERE NOME = p_nome_cliente
    AND COGNOME = p_cognome_cliente
    AND EMAIL = p_email_cliente
    AND TELEFONO = p_telefono_cliente
    AND VIA = p_via_cliente
    AND CITTA = p_citta_cliente
    AND CAP = p_cap_cliente;

  -- Se il cliente non esiste, crealo
  IF v_id_cliente IS NULL THEN
    INSERT INTO CLIENTE (IDCLIENTE, NOME, COGNOME, EMAIL, TELEFONO, VIA, CITTA, CAP)
    VALUES (SEQ_CLIENTE.NEXTVAL, p_nome_cliente, p_cognome_cliente, p_email_cliente, p_telefono_cliente, p_via_cliente, p_citta_cliente, p_cap_cliente);

    v_id_cliente := SEQ_CLIENTE.CURRVAL;
  END IF;

  -- Ottieni l'ID del progetto
  SELECT IDPROG INTO v_id_progetto
  FROM PROGETTO
  WHERE NOME = p_nome_progetto;

  -- Crea un nuovo ordine
  INSERT INTO ORDINE (IDORDINE, IDFATTURA, IDCLIENTE, IDSPEDIZIONE, NUMEROPRODOTTI, DATACREAZIONE)
  VALUES (SEQ_ORDINE.NEXTVAL, NULL, v_id_cliente, NULL, 0, SYSDATE);

  v_id_ordine := SEQ_ORDINE.CURRVAL;

  -- Aggiorna l'ordine con l'ID del progetto
  UPDATE ORDINE
  SET IDPROG = v_id_progetto
  WHERE IDORDINE = v_id_ordine;

  COMMIT;

  RETURN v_id_ordine;
END;
/
/*Questa funzione accetta come parametri i dettagli del cliente (nome, cognome, email, telefono, via, città, CAP) e il nome del progetto.
La funzione verifica se il cliente esiste già nella tabella "Cliente" in base alle informazioni fornite. Se il cliente non esiste, viene
creato un nuovo record nella tabella "Cliente". Successivamente, viene recuperato l'ID del progetto dalla tabella "Progetto". Infine,
viene creato un nuovo ordine nella tabella "Ordine" con i dettagli del cliente e l'ID del progetto. La funzione restituisce l'ID dell'ordine creato.*/

CREATE OR REPLACE FUNCTION cancella_progetto_ordine(
  p_id_ordine IN ORDINE.IDORDINE%TYPE,
  p_id_progetto IN PROGETTO.IDPROG%TYPE
) RETURN BOOLEAN
IS
  v_num_progetti NUMBER;
BEGIN
  -- Controlla il numero di progetti presenti nell'ordine
  SELECT COUNT(*)
  INTO v_num_progetti
  FROM ORDINE o
  JOIN PROGETTO p ON o.IDPROG = p.IDPROG
  WHERE o.IDORDINE = p_id_ordine;

  -- Verifica se l'ordine esiste e contiene più di due progetti
  IF v_num_progetti > 2 THEN
    -- Cancella il progetto dall'ordine
    DELETE FROM ORDINE
    WHERE IDORDINE = p_id_ordine
    AND IDPROG = p_id_progetto;

    COMMIT;
    
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    RETURN FALSE;
END;
/
/*Questa funzione accetta l'ID dell'ordine e l'ID del progetto come parametri. Utilizza una query per contare il numero
di progetti presenti nell'ordine specificato. Se il numero di progetti è maggiore di due, viene eliminato il progetto 
specificato dall'ordine. Viene restituito il valore TRUE se il progetto viene cancellato con successo, altrimenti viene
restituito il valore FALSE.*/

CREATE OR REPLACE PROCEDURE inserisci_fornitura(
    IN_PARTITAIVAFORNITORE IN VARCHAR2,
    IN_EANCOMPONENTE IN VARCHAR2,
    IN_QUANTITA IN NUMBER,
    IN_DATAACQUISTO IN DATE
)
AS
    V_EXISTE_FORNITORE NUMBER;
    V_EXISTE_COMPONENTE NUMBER;
BEGIN
    -- Verifica se il fornitore esiste nella tabella FORNITORE
    SELECT COUNT(*) INTO V_EXISTE_FORNITORE
    FROM FORNITORE
    WHERE PARTITAIVA = IN_PARTITAIVAFORNITORE;

    IF V_EXISTE_FORNITORE = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Il fornitore specificato non esiste.');
    END IF;

    -- Verifica se il componente esiste nella tabella COMPONENTE
    SELECT COUNT(*) INTO V_EXISTE_COMPONENTE
    FROM COMPONENTE
    WHERE EAN = IN_EANCOMPONENTE;

    IF V_EXISTE_COMPONENTE = 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Il componente specificato non esiste.');
    END IF;

    -- Inserisce la nuova riga nella tabella FORNITURA
    INSERT INTO FORNITURA (PARTITAIVAFORNITORE, EANCOMPONENTE, QUANTITA, DATAACQUISTO)
    VALUES (IN_PARTITAIVAFORNITORE, IN_EANCOMPONENTE, IN_QUANTITA, IN_DATAACQUISTO);

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
     RAISE;
END;
/
/*Viene verificato se il fornitore esiste nella tabella "FORNITORE" contando il numero di righe corrispondenti 
alla partita IVA specificata. Se il contatore è uguale a zero, viene sollevato un errore con un messaggio appropriato.
Viene verificato se il componente esiste nella tabella "COMPONENTE" contando il numero di righe corrispondenti
al codice EAN specificato. Se il contatore è uguale a zero, viene sollevato un errore con un messaggio appropriato.
Viene eseguita un'istruzione di inserimento nella tabella "FORNITURA" con i valori passati come parametri.
Viene eseguito un commit per confermare la transazione.
In caso di errori durante l'esecuzione della procedura, viene eseguito un rollback per annullare la transazione
e viene sollevata un'eccezione per segnalare l'errore.
In sostanza, la procedura consente di inserire una nuova riga nella tabella "FORNITURA" dopo aver verificato che
il fornitore e il componente specificati esistano nelle rispettive tabelle.*/

CREATE OR REPLACE FUNCTION stima_consegna_progetto(
    IN_IDCLIENTE IN NUMBER,
    IN_IDORDINE IN NUMBER,
    IN_IDPROGETTO IN NUMBER
) RETURN DATE
IS
    V_DATAINIZIO PROGETTO.DATAINIZIO%TYPE;
    V_STIMA_GIORNI ORDINE.NUMEROPRODOTTI%TYPE;
    V_CONSEGNA_EFFETTIVA DATE;
BEGIN
    -- Recupera la data di inizio del progetto
    SELECT DATAINIZIO INTO V_DATAINIZIO
    FROM PROGETTO
    WHERE IDPROG = IN_IDPROGETTO;

    -- Calcola la stima dei giorni di consegna in base al numero di prodotti nell'ordine
    SELECT NUMEROPRODOTTI INTO V_STIMA_GIORNI
    FROM ORDINE
    WHERE IDORDINE = IN_IDORDINE;

    -- Calcola la consegna effettiva aggiungendo la stima dei giorni alla data di inizio del progetto
    V_CONSEGNA_EFFETTIVA := V_DATAINIZIO + V_STIMA_GIORNI;

    RETURN V_CONSEGNA_EFFETTIVA;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
END;
/
/*La funzione STIMA_CONSEGNA_PROGETTO prende in input l'ID del cliente, l'ID dell'ordine e l'ID del progetto.
Recupera la data di inizio del progetto e calcola la stima dei giorni di consegna basata sul numero di prodotti
nell'ordine. Successivamente, calcola la data di consegna effettiva aggiungendo la stima dei giorni alla data
di inizio del progetto. Infine, restituisce la data di consegna effettiva.*/

























--CREAZIONE TRIGGER
--TRIGGER • Un progetto deve essere al più 15 giorni nei reparti di progettazione e produzione.
CREATE OR REPLACE TRIGGER controllo_durata_progetto
BEFORE INSERT OR UPDATE ON PROGETTO
FOR EACH ROW
DECLARE
    durata_progettazione NUMBER;
    durata_produzione NUMBER;
BEGIN
    -- Calcola la durata del progetto nei reparti di progettazione e produzione
    SELECT STIMATEMPO INTO durata_progettazione
    FROM PROGETTAZIONE
    WHERE IDPROG = :NEW.IDPROG;

    SELECT SUM(NMACCHINE) INTO durata_produzione
    FROM PRODUZIONE
    WHERE IDPROG = :NEW.IDPROG;

    -- Controlla se la durata supera i 15 giorni
    IF durata_progettazione + durata_produzione > 15 THEN
        RAISE_APPLICATION_ERROR(-20001, 'La durata del progetto nei reparti di progettazione e produzione supera i 15 giorni.');
    END IF;
END;
/
/*Il trigger viene eseguito prima di ogni operazione di inserimento o aggiornamento
sulla tabella "PROGETTO" (BEFORE INSERT OR UPDATE ON PROGETTO) per ogni riga coinvolta (FOR EACH ROW).
Nella sezione dichiarativa del trigger, vengono definiti due variabili: "durata_progettazione" e
"durata_produzione" di tipo NUMBER. Queste variabili verranno utilizzate per memorizzare la durata
del progetto nei reparti di progettazione e produzione.
Nella sezione esecutiva del trigger, vengono effettuate due query per recuperare 
le informazioni sulla durata del progetto. La prima query utilizza la tabella "PROGETTAZIONE"
per ottenere il valore della colonna "STIMATEMPO" corrispondente all'IDPROG del nuovo progetto 
che viene inserito o aggiornato. La seconda query utilizza la tabella "PRODUZIONE" per calcolare la somma della
colonna "NMACCHINE" corrispondente all'IDPROG del nuovo progetto.
successivamente, viene effettuato un controllo sulla durata totale del progetto sommando
la durata di progettazione e produzione. Se questa durata supera i 15 giorni, viene generato
un errore utilizzando la procedura RAISE_APPLICATION_ERROR. L'errore ha un codice (-20001) e un
 messaggio associato ("La durata del progetto nei reparti di progettazione e produzione supera i 15 giorni.").*/

 --TRIGGER: • I dipendenti specializzati non possono lavorare pi`u di 8 ore al giorno.
CREATE OR REPLACE TRIGGER controllo_ore_giornaliere
BEFORE INSERT OR UPDATE ON TURNO
FOR EACH ROW
DECLARE
    tipo_dipendente VARCHAR2(20);
    ore_lavorate NUMBER;
BEGIN
    -- Ottieni il tipo di dipendente dal dipendente associato al turno
    SELECT TIPODIPENDENTE INTO tipo_dipendente
    FROM DIPENDENTE
    WHERE IDDIPENDENTE = :NEW.IDDIPENDENTE;

    -- Calcola il numero di ore lavorate nel turno corrente
    ore_lavorate := (:NEW.ORAFINE - :NEW.ORAINIZIO) * 24;

    -- Controlla se il dipendente è specializzato e ha superato le 8 ore giornaliere
    IF tipo_dipendente = 'Specializzato' AND ore_lavorate > 8 THEN
        RAISE_APPLICATION_ERROR(-20001, 'I dipendenti specializzati non possono lavorare più di 8 ore al giorno.');
    END IF;
END;
/
/*Questo trigger viene attivato prima di ogni operazione di inserimento o aggiornamento
sulla tabella "TURNO" e per ogni riga coinvolta (FOR EACH ROW).
All'interno del trigger, viene recuperato il tipo di dipendente associato al turno tramite
una query sulla tabella "DIPENDENTE". Successivamente, viene calcolato il numero di ore
lavorate nel turno corrente sottraendo l'orario di inizio dall'orario di fine del turno e moltiplicando per 24.
Infine, viene effettuato il controllo se il dipendente è specializzato e ha superato le 8
ore giornaliere. In caso affermativo, viene generato un errore tramite la procedura RAISE_APPLICATION_ERROR.*/

--TRIGGER: • Un fornitore non deve impiegare più di 2 giorni nel consegnare la merce.
CREATE OR REPLACE TRIGGER controllo_tempi_consegna
BEFORE INSERT OR UPDATE ON FORNITURA
FOR EACH ROW
DECLARE
    giorni_diff NUMBER;
BEGIN
    -- Calcola la differenza di giorni tra la data di inserimento della fornitura e la data corrente
    giorni_diff := TRUNC(SYSDATE) - TRUNC(:NEW.DATAINSERIMENTO);

    -- Controlla se la differenza di giorni supera 2
    IF giorni_diff > 2 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Il fornitore non può impiegare più di 2 giorni nel consegnare la merce.');
    END IF;
END;
/
/*Il trigger viene eseguito prima di ogni operazione di inserimento o aggiornamento sulla tabella "Fornitura"
(BEFORE INSERT OR UPDATE ON FORNITURA).
Per ogni riga coinvolta nell'operazione (FOR EACH ROW), vengono eseguite le istruzioni all'interno del blocco PL/SQL.
Viene dichiarata una variabile "giorni_diff" di tipo NUMBER per memorizzare la differenza di giorni tra la data
di inserimento della fornitura e la data corrente.
Viene calcolata la differenza di giorni utilizzando la funzione TRUNC per ottenere solo la parte della data senza l'orario.
Si verifica se la differenza di giorni (giorni_diff) supera il limite di 2 giorni.
Se la condizione è verificata, viene generato un errore tramite la procedura RAISE_APPLICATION_ERROR
con il codice di errore -20001 e il messaggio di errore specificato ('Il fornitore non può impiegare
più di 2 giorni nel consegnare la merce.').
Il trigger viene compilato e creato o sostituito se già esistente nella base di dati.*/

--TRIGGER: Il prezzo di un progetto `e determinato dal prezzo dei singoli componenti elettronici coinvolti
--più una percentuale del 200%
CREATE OR REPLACE TRIGGER calcola_prezzo_progetto
BEFORE INSERT OR UPDATE ON COMPONENTIPROGETTO
FOR EACH ROW
DECLARE
  prezzo_componenti NUMBER;
BEGIN
  -- Calcola il prezzo totale dei componenti del progetto
  SELECT SUM(COMPONENTE.PREZZO * COMPONENTIPROGETTO.QUANTITA)
  INTO prezzo_componenti
  FROM COMPONENTE
  INNER JOIN COMPONENTIPROGETTO ON COMPONENTE.EAN = COMPONENTIPROGETTO.EAN
  WHERE COMPONENTIPROGETTO.IDPROG = :NEW.IDPROG;
  
  -- Calcola il nuovo prezzo del progetto
  :NEW.PREZZO := prezzo_componenti + (prezzo_componenti * 2); -- Aggiunge il 200%
END;
/
/*Quando viene inserita o aggiornata una riga nella tabella COMPONENTIPROGETTO, il trigger viene attivato.
Viene dichiarata una variabile prezzo_componenti di tipo NUMBER per memorizzare il prezzo totale dei componenti del progetto.
Viene eseguita una query che calcola la somma del prezzo dei componenti (COMPONENTE.PREZZO)
moltiplicato per la quantità (COMPONENTIPROGETTO.QUANTITA) di ciascun componente coinvolto nel progetto.
La query utilizza una clausola JOIN per collegare la tabella COMPONENTE alla tabella COMPONENTIPROGETTO
utilizzando la corrispondenza tra le colonne EAN.
Il risultato della query viene memorizzato nella variabile prezzo_componenti.
Viene calcolato il nuovo prezzo del progetto assegnando a :NEW.PREZZO il valore di prezzo_componenti
incrementato del 200% (moltiplicando per 2).
Il trigger viene completato e l'inserimento o l'aggiornamento nella tabella COMPONENTIPROGETTO può procedere.*/

--TRIGGER: In magazzino si verifica lo spazio residuo tramite la differenza tra i componenti gi`a immagazzinati e lo spazio totale.
CREATE OR REPLACE TRIGGER verifica_spazio_magazzino
AFTER INSERT OR UPDATE OR DELETE ON IMMAGAZZINAMENTO
FOR EACH ROW
DECLARE
  spazio_totale NUMBER;
  spazio_utilizzato NUMBER;
  spazio_residuo NUMBER;
BEGIN
  -- Calcola lo spazio totale disponibile nel magazzino
  SELECT SPAZIOTOT INTO spazio_totale FROM MAGAZZINO WHERE IDREPARTO = :NEW.IDREPARTO;
  
  -- Calcola lo spazio utilizzato nel magazzino
  SELECT SUM(QUANTITA) INTO spazio_utilizzato FROM IMMAGAZZINAMENTO WHERE IDREPARTO = :NEW.IDREPARTO;
  
  -- Calcola lo spazio residuo nel magazzino
  spazio_residuo := spazio_totale - spazio_utilizzato;
  
  -- Aggiorna il valore dello spazio residuo nel magazzino
  UPDATE MAGAZZINO SET SPAZIOTOT = spazio_residuo WHERE IDREPARTO = :NEW.IDREPARTO;
END;
/
/*Il trigger verifica_spazio_magazzino viene attivato dopo l'inserimento, l'aggiornamento o la cancellazione di una riga nella tabella IMMAGAZZINAMENTO.
Vengono dichiarate le variabili spazio_totale, spazio_utilizzato e spazio_residuo di tipo NUMBER per memorizzare rispettivamente lo spazio totale disponibile nel magazzino, lo spazio utilizzato attualmente e lo spazio residuo.
Viene eseguita una query per recuperare lo spazio totale disponibile nel magazzino dalla tabella MAGAZZINO in base all'IDREPARTO specificato nella riga inserita o aggiornata nella tabella IMMAGAZZINAMENTO.
Viene eseguita una query per calcolare lo spazio utilizzato nel magazzino sommando la quantità di tutti i componenti immagazzinati nella tabella IMMAGAZZINAMENTO per l'IDREPARTO specificato.
Viene calcolato lo spazio residuo sottraendo lo spazio utilizzato dallo spazio totale.
Viene eseguita un'istruzione di aggiornamento per aggiornare il valore dello spazio residuo nella tabella MAGAZZINO per l'IDREPARTO specificato.
Il trigger viene completato e l'operazione di inserimento, aggiornamento o cancellazione può procedere.*/

--TRIGGER: Un ordine da parte di un cliente può essere cancellato al più dopo 5 ore.
CREATE OR REPLACE TRIGGER cancella_ordine
AFTER INSERT ON ORDINE
FOR EACH ROW
DECLARE
  v_ordine_id ORDINE.IDORDINE%TYPE;
BEGIN
  -- Ottieni l'ID dell'ordine appena inserito
  v_ordine_id := :new.IDORDINE;

  -- Crea un job per la cancellazione dell'ordine dopo 5 ore
  DBMS_SCHEDULER.CREATE_JOB(
    job_name        => 'CANCELLA_ORDINE_' || v_ordine_id,
    job_type        => 'PLSQL_BLOCK',
    job_action      => 'BEGIN
                          DELETE FROM ORDINE
                          WHERE IDORDINE = ' || v_ordine_id || ';
                        END;',
    start_date      => SYSTIMESTAMP,
    repeat_interval => 'freq=hourly; interval=5',
    enabled         => TRUE,
    auto_drop       => TRUE
  );
END;
/
/*La clausola AFTER INSERT ON ORDINE indica che il trigger verrà eseguito dopo l'inserimento di una riga nella tabella ORDINE.
Il trigger è dichiarato come FOR EACH ROW, il che significa che il trigger viene eseguito una volta
 per ogni riga inserita nella tabella ORDINE.
La variabile v_ordine_id viene dichiarata con il tipo di dato corrispondente alla colonna IDORDINE
della tabella ORDINE. Questa variabile conterrà l'ID dell'ordine appena inserito.
Successivamente, il codice ottiene l'ID dell'ordine appena inserito assegnando il valore della colonna
IDORDINE della riga appena inserita alla variabile v_ordine_id utilizzando :new.IDORDINE. La sintassi :new si riferisce alla riga appena inserita.
Viene creato un job utilizzando DBMS_SCHEDULER.CREATE_JOB. Un job è un'attività pianificata che verrà
eseguita in un momento specifico o in base a una pianificazione predefinita. In questo caso, viene creato un job per cancellare l'ordine dopo 5 ore.
Il job viene denominato 'CANCELLA_ORDINE_' || v_ordine_id per renderlo univoco per ogni ordine.
Ad esempio, se l'ID dell'ordine è 1, il nome del job sarà 'CANCELLA_ORDINE_1'.
Il tipo di job viene impostato su 'PLSQL_BLOCK', che significa che il job eseguirà un blocco di codice PL/SQL.
Il blocco PL/SQL specificato come job_action contiene l'istruzione DELETE per cancellare l'ordine
corrispondente utilizzando l'ID dell'ordine appena inserito (WHERE IDORDINE = ' || v_ordine_id || ';').
La data di inizio del job viene impostata su SYSTIMESTAMP, il che significa che il job inizierà
immediatamente dopo la creazione del trigger.
La frequenza di ripetizione del job viene impostata su 'freq=hourly; interval=5', il che significa
che il job verrà ripetuto ogni 5 ore.
Il job viene abilitato (enabled => TRUE) in modo che venga eseguito secondo la pianificazione specificata.
auto_drop => TRUE indica che il job verrà eliminato automaticamente dopo l'esecuzione.
*/





--VISTE

--Vista per visualizzare i dettagli dell'ordine insieme alle informazioni del cliente:
CREATE VIEW VISTA_ORDINE_CLIENTE AS
SELECT o.IDORDINE, o.DATACREAZIONE, c.NOME, c.COGNOME, c.EMAIL
FROM ORDINE o
JOIN CLIENTE c ON o.IDCLIENTE = c.IDCLIENTE;

--Vista per visualizzare i dettagli completi di una fattura, inclusi i dettagli dell'ordine e le informazioni del cliente:
CREATE VIEW VISTA_FATTURA_DETTAGLIATA AS
SELECT f.IDFATTURA, f.DATAEMISSIONE, f.TOTALE, o.IDORDINE, o.DATACREAZIONE, c.NOME, c.COGNOME, c.EMAIL
FROM FATTURA f
JOIN ORDINE o ON f.IDFATTURA = o.IDFATTURA
JOIN CLIENTE c ON o.IDCLIENTE = c.IDCLIENTE;

--Vista per visualizzare i componenti associati a ciascun progetto con le relative quantità:
CREATE VIEW VISTA_COMPONENTI_PROGETTO AS
SELECT cp.IDPROG, cp.EAN, cp.QUANTITA, c.NOME, c.PREZZO
FROM COMPONENTIPROGETTO cp
JOIN COMPONENTE c ON cp.EAN = c.EAN;

--Vista per visualizzare i dettagli di un dipendente insieme alle informazioni del reparto di appartenenza:
CREATE VIEW VISTA_DIPENDENTE_REPARTO AS
SELECT d.IDDIPENDENTE, d.NOME, d.COGNOME, d.RAL, d.TIPODIPENDENTE, r.IDREPARTO, r.TELEFONO
FROM DIPENDENTE d
JOIN REPARTO r ON d.IDDIPENDENTE = r.IDREPARTO;

--Vista per calcolare le presenze di ogni dipendente in ogni giorno per un mese nel rispettivo reparto
CREATE VIEW VISTA_PRESENZE AS
SELECT TURNO.IDDIPENDENTE, TURNO.IDREPARTO, TRUNC(TURNO.ORAINIZIO) AS DATA,
       SUM(EXTRACT(HOUR FROM TURNO.ORAFINE - TURNO.ORAINIZIO)) AS ORE_PRESENZA
FROM TURNO
WHERE TURNO.ORAFINE - TURNO.ORAINIZIO >= INTERVAL '4' HOUR
      AND TURNO.ORAINIZIO >= TRUNC(SYSDATE, 'MM') -- Inizio mese corrente
      AND TURNO.ORAINIZIO < TRUNC(SYSDATE, 'MM') + INTERVAL '1' MONTH -- Fine mese corrente
GROUP BY TURNO.IDDIPENDENTE, TURNO.IDREPARTO, TRUNC(TURNO.ORAINIZIO);

--Vista per calcolare lo spazio totale e lo spazio occupato in ogni magazzino
CREATE VIEW VISTA_MAGAZZINO_PIENO AS
SELECT M.IDREPARTO, M.SPAZIOTOT, SUM(I.QUANTITA) AS SPAZIO_OCCUPATO,
       CASE WHEN SUM(I.QUANTITA) >= M.SPAZIOTOT THEN 'PIENO' ELSE 'NON PIENO' END AS STATO_MAGAZZINO
FROM MAGAZZINO M
LEFT JOIN IMMAGAZZINAMENTO I ON M.IDREPARTO = I.IDREPARTO
GROUP BY M.IDREPARTO, M.SPAZIOTOT;











--SCHEDULER
BEGIN
  DBMS_SCHEDULER.CREATE_JOB(
    job_name        => 'CANCELLA_ORDINE',
    job_type        => 'PLSQL_BLOCK',
    job_action      => 'BEGIN
                          DELETE FROM ORDINE
                          WHERE IDORDINE = :order_id;
                        END;',
    start_date      => SYSTIMESTAMP,
    repeat_interval => 'freq=hourly; interval=5',
    enabled         => TRUE,
    auto_drop       => TRUE
  );
END;
/
/*DBMS_SCHEDULER.CREATE_JOB: Questa procedura crea un nuovo job scheduler con i parametri specificati.
job_name: Specifica il nome del job. In questo caso, il nome del job è "CANCELLA_ORDINE".
job_type: Specifica il tipo di job come "PLSQL_BLOCK". Indica che il job eseguirà un blocco di codice PL/SQL.
job_action: Questa è l'azione del job, ovvero il blocco di codice PL/SQL da eseguire. Nel caso specifico,
il blocco di codice esegue una query di eliminazione che cancella l'ordine dalla tabella ORDINE in base
all'ID dell'ordine fornito come parametro :order_id. Nota che :order_id è un segnaposto che dovrebbe essere
sostituito con il valore effettivo dell'ID dell'ordine da cancellare.
start_date: Specifica la data di inizio del job. In questo caso, viene utilizzata la funzione SYSTIMESTAMP
per impostare la data di inizio al momento corrente.
epeat_interval: Specifica l'intervallo di ripetizione del job. In questo caso, l'intervallo è impostato su
"freq=hourly; interval=5", il che significa che il job verrà eseguito ogni 5 ore.
enabled: Specifica se il job è abilitato o meno. Nel caso specifico, è impostato su TRUE, quindi il job sarà
abilitato dopo la sua creazione.
auto_drop: Specifica se il job verrà eliminato automaticamente dopo l'esecuzione. In questo caso,
è impostato su TRUE, quindi il job verrà eliminato automaticamente dopo aver eseguito la cancellazione dell'ordine.*/




 

--CREAZIONE UTENTI E PRIVILEGI
--Creazione utenti 
CREATE USER proprietario_db_fabbrica    IDENTIFIED BY admin;
CREATE USER responsabile   IDENTIFIED BY responsabile;
CREATE USER cliente        IDENTIFIED BY cliente;
CREATE USER fornitore      IDENTIFIED BY fornitore;
 
--Do tutti i privilegi al proprietario del database
GRANT ALL PRIVILEGES TO proprietario_db_fabbrica;

--CREATE USER proprietario_db_fabbrica    IDENTIFIED BY admin;

--CREATE USER responsabile_DB   IDENTIFIED BY pass_responsabile;
GRANT CONNECT, CREATE SESSION TO responsabile_DB;
GRANT UPDATE ON progettazione TO responsabile_DB;
GRANT UPDATE ON produzione TO responsabile_DB;
GRANT EXECUTE ON STIMA_CONSEGNA_PROGETTO TO responsabile_DB; 

--CREATE USER cliente_DB IDENTIFIED BY pass_cliente;
GRANT SELECT ON cliente TO cliente_DB;
GRANT SELECT ON progetto TO cliente_DB;
GRANT INSERT ON cliente TO cliente_DB;
GRANT INSERT ON ordine TO cliente_DB;
GRANT UPDATE ON ordine TO cliente_DB;
GRANT EXECUTE ON ordina_progetto TO cliente_DB;
GRANT EXECUTE ON cancella_progetto_ordine TO cliente_DB;

--CREATE USER fornitore_DB IDENTIFIED BY pass_fornitore;
GRANT CONNECT, CREATE SESSION TO fornitore_DB;
GRANT SELECT ON fornitore TO fornitore_DB;
GRANT SELECT ON componente TO fornitore_DB;
GRANT INSERT ON fornitura TO fornitore_DB;
GRANT EXECUTE ON inserisci_fornitura TO fornitore_DB;